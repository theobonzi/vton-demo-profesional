import { useEffect, useState } from "react";
import { ProductCard } from "@/components/ProductCard";
import { Button } from "@/components/ui/button";
import { ArrowRight, Loader2 } from "lucide-react";
import { useNavigate } from "react-router-dom";
import { cn } from "@/lib/utils";
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { ToggleGroup, ToggleGroupItem } from "@/components/ui/toggle-group";
import { useProductStore } from "@/store/useProductStore";

export default function ProductSelection() {
  const [selectedProducts, setSelectedProducts] = useState<number[]>([]);
  const navigate = useNavigate();
  
  const { 
    products, 
    brands, 
    loading, 
    error, 
    fetchProducts, 
    fetchBrands,
    filters,
    setFilters 
  } = useProductStore();

  // Charger les données au montage du composant
  useEffect(() => {
    const loadData = async () => {
      try {
        await Promise.all([
          fetchBrands(),
          fetchProducts()
        ]);
      } catch (err) {
        console.error('Erreur lors du chargement:', err);
      }
    };

    loadData();
  }, []);

  // Recharger les produits quand les filtres changent
  useEffect(() => {
    if (brands.length > 0) {
      fetchProducts();
    }
  }, [filters.brand, filters.gender]);

  const handleProductSelect = (productId: number) => {
    setSelectedProducts(prev =>
      prev.includes(productId)
        ? prev.filter(id => id !== productId)
        : [...prev, productId]
    );
  };

  const handleContinue = async () => {
    if (selectedProducts.length > 0) {
      const picked = products.filter(p => selectedProducts.includes(p.id));

      // Préparer les configurations des produits
      const productConfigs = picked.map((p) => ({
        id: p.id,
        name: p.name,
        price: `${p.price.toFixed(2)} €`,
        displayImage: p.image_url,
        apiImage: p.api_image_url || p.image_url,
      }));

      navigate("/selfie-capture", {
        state: { 
          selectedProducts,
          productConfigs,
        }
      });
    }
  };

  return (
    <div className="min-h-screen bg-background">
      {/* Header */}
      <header className="border-b border-border">
        <div className="max-w-7xl mx-auto px-6 py-6">
          {/* Top row with title */}
          <div className="flex items-center justify-between gap-4 mb-4">
            <div>
              <h1 className="text-2xl font-light tracking-wider text-foreground">
                démo
              </h1>
              <p className="text-text-subtle text-sm mt-1 font-light">
                Essayage Virtuel
              </p>
            </div>
          </div>

          {/* Second row with filters */}
          <div className="flex items-center justify-between gap-4">
            {/* Brand tabs */}
            <Tabs value={filters.brand || "all"} onValueChange={(v) => setFilters({ brand: v === "all" ? undefined : v })}>
              <TabsList>
                <TabsTrigger value="all">Toutes</TabsTrigger>
                {brands.map(brand => (
                  <TabsTrigger key={brand.id} value={brand.name}>
                    {brand.name}
                  </TabsTrigger>
                ))}
              </TabsList>
            </Tabs>

            {/* Gender toggle group */}
            <ToggleGroup 
              type="single" 
              value={filters.gender || "all"} 
              onValueChange={(v) => setFilters({ gender: v === "all" ? undefined : v as 'men' | 'women' | 'unisex' })}
            >
              <ToggleGroupItem value="all" aria-label="Tous">Tous</ToggleGroupItem>
              <ToggleGroupItem value="women" aria-label="Femme">Femme</ToggleGroupItem>
              <ToggleGroupItem value="men" aria-label="Homme">Homme</ToggleGroupItem>
            </ToggleGroup>
          </div>
        </div>
      </header>

      <main className="max-w-7xl mx-auto px-6 py-12">
        {/* Instructions */}
        <div className="mb-12 text-center">
          <h2 className="text-3xl font-light text-foreground mb-4 tracking-wide">
            Sélectionnez vos pièces
          </h2>
          <p className="text-text-subtle font-light max-w-lg mx-auto">
            Choisissez les vêtements que vous souhaitez essayer virtuellement.
            Vous pouvez sélectionner plusieurs pièces.
          </p>
        </div>

        {/* Loading state */}
        {loading && (
          <div className="flex justify-center items-center py-12">
            <Loader2 className="w-8 h-8 animate-spin text-primary" />
            <span className="ml-2 text-muted-foreground">Chargement du catalogue...</span>
          </div>
        )}

        {/* Error state */}
        {error && !loading && (
          <div className="text-center py-12">
            <p className="text-red-500 mb-4">{error}</p>
            <Button 
              onClick={() => window.location.reload()} 
              variant="outline"
            >
              Réessayer
            </Button>
          </div>
        )}

        {/* Products grid */}
        {!loading && !error && (
          <>
            {products.length === 0 ? (
              <div className="text-center py-12">
                <p className="text-muted-foreground">Aucun produit trouvé pour cette sélection.</p>
              </div>
            ) : (
              <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6 mb-12">
                {products.map((product) => (
                  <ProductCard
                    key={product.id}
                    product={{
                      id: product.id.toString(),
                      name: product.name,
                      price: `${product.price.toFixed(2)} €`,
                      image: product.image_url,
                    }}
                    isSelected={selectedProducts.includes(product.id)}
                    onSelect={(id) => handleProductSelect(parseInt(id))}
                  />
                ))}
              </div>
            )}
          </>
        )}

        {/* Continue button */}
        <div className="flex justify-center">
          <Button
            onClick={handleContinue}
            disabled={selectedProducts.length === 0}
            size="lg"
            className={cn(
              "px-8 py-3 font-light tracking-wider",
              "transition-all duration-300",
              selectedProducts.length > 0
                ? "opacity-100 scale-100"
                : "opacity-50 scale-95 cursor-not-allowed"
            )}
          >
            Continuer ({selectedProducts.length})
            <ArrowRight className="ml-2 w-4 h-4" />
          </Button>
        </div>
      </main>
    </div>
  );
}
